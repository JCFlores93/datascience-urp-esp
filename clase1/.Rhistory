setwd("D:/datascience-urp-esp/clase1")
rm(list = ls()) # Borra lo guardadoen memoria
setwd("D:/datascience-urp-esp/clase1")
rm(list = ls()) # Borra lo guardadoen memoria
source('D:/datascience-urp-esp/clase1/intro_R.R')
data_set = read.csv('../DataSet/train.csv')
data_set <- read.csv('grasacorporal.csv')
View(data_set)
View(data_set)
data <- read.csv('grasacorporal.csv')
rm(list = ls()) # Borra lo guardadoen memoria
data <- read.csv('grasacorporal.csv')
View(data)
View(data)
names(data)
View(data)
library(readr)
datos <- read_csv("grasacorporal.csv")
View(datos)
str(data) # estructura de la data
summary(data)
tabla_resumen <- summary(data) # tabla resumen
write.csv(tabla_resumen, "datosResumen.csv")
pecho <- data$pecho
View(pecho)
data$var1 <- data$antebrazo + data$muneca
View(data)
head(data)
data[,]
data[1,]
data[1:3,]
data[1:5,2]
data[c(1, 3), 2]
install.packages("neuralnet")
library(neuralnet)
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
install.packages(c("ggplot2", "tidyr", "dplyr", "ISLR", "foreign"))
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
setwd("D:/datascience-urp-esp/clase1")
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
data <- read.csv("Advertising.csv") ## Cargar la data
rm(list=ls())
data <- read.csv("Advertising.csv") ## Cargar la data
str(data) # ver la estructura de la data
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
summary(data)
boxplot(data[,2:5])
View(data)
cor(data$TV,data$radio)
cor(data$TV,data$radio, method = 'spearman')
correlacion<-cor(data[,2:5], method = 'spearman')
View(correlacion)
View(correlacion)
library(corrplot)
install.packages("corrplot")
library(corrplot)
library("PerformanceAnalytics")
install.packages("PerformanceAnalytics")
install.packages(c("psych", "GGally", "ggcorrplot"))
library(corrplot)
library("PerformanceAnalytics")
library(psych)
library(corrplot)
library(GGally)
library(ggcorrplot)
corrplot(correlacion, method="number", type="upper")
chart.Correlation(data[,2:5], histogram=TRUE, pch=19)
pairs.panels(data[,2:5], scale=TRUE)
corrplot.mixed(cor(data[,2:5]), order="hclust", tl.col="black")
ggpairs(data[,2:5])
ggcorr(data[,2:5], nbreaks=8, palette='RdGy', label=TRUE, label_size=5, label_color='white')
ggcorrplot(cor(data[,2:5]), p.mat = cor_pmat(mtcars), hc.order=TRUE, type='lower')
m <- lm(sales ~ TV, data = data)
summary(m)
x_nuevos<-data.frame(TV=c(45,1000))
predict(m,x_nuevos)
saveRDS(m,"Modelo_Regresion.rds")
View(m)
View(m)
data$fitted <- m$fitted.values
View(data)
View(data)
data$residual <- m$residuals
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fitted), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fitted, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
data <- read.csv("Advertising.csv") ## Cargar la data
str(data) # ver la estructura de la data
View(data)
summary(data) # Tabla resumen
boxplot(data[,2:5]) # gráfico de cajas
cor(data$TV,data$radio) # por defecto utiliza pearson
cor(data$TV,data$radio, method = 'spearman')
correlacion<-cor(data[,2:5], method = 'spearman') #
library(corrplot)
corrplot(correlacion, method="number", type="upper")
library("PerformanceAnalytics")
chart.Correlation(data[,2:5], histogram=TRUE, pch=19)
library(psych)
pairs.panels(data[,2:5], scale=TRUE)
library(corrplot)
corrplot.mixed(cor(data[,2:5]), order="hclust", tl.col="black")
library(GGally)
ggpairs(data[,2:5])
ggcorr(data[,2:5], nbreaks=8, palette='RdGy', label=TRUE, label_size=5, label_color='white')
library(ggcorrplot)
ggcorrplot(cor(data[,2:5]), p.mat = cor_pmat(mtcars), hc.order=TRUE, type='lower')
View(data)
View(data)
m <- lm(sales ~ newspaper, data = data)
View(m)
View(m)
m <- lm(sales ~ newspaper, data = data)
summary(m)
View(data)
View(data)
x_nuevos<-data.frame(newspaper=c(45,50))
predict(m,x_nuevos)
saveRDS(m,"Modelo_Regresion_newspaper.rds")
data$fitted <- m$fitted.values
data$residual <- m$residuals
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fitted), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fitted, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
m <- lm(sales ~ newspaper, data = data)
data$fitted <- m$fitted.values
data$residual <- m$residuals
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fitted), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fitted, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
ggplot(data = data, aes(x = newspaper, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fitted), color = "blue") +
geom_segment(aes(x = newspaper, xend = newspaper, y = sales, yend = fitted, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para newspaper", ylab = "Ventas") +
theme_bw()
summary(m)
correlacion<-cor(data[,2:5], method = 'spearman')
corrplot(correlacion, method="number", type="upper")
rm(list=ls())
##########################################################################
##### -- Programa de Especialización en Data Science - Nivel I -- ########
##########################################################################
######## Tema : Modelos de Regresion Avanzados ###########################
######## Autores: Jose Cardenas - Andre Chavez  ##########################
##########################################################################
############################################
# ANÁLISIS DE REGRESION SIMPLE Y MULTIPLE #
############################################
############################################
# ANÁLISIS DE REGRESION SIMPLE#############
############################################
rm(list=ls())
# Librerias necesarias para el analisis
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
# Leemos la data y nos hacemos las siguientes preguntas:
# ¿Existe una relación entre el presupuesto de marketing y las ventas?
# que fuerte es la relación (si existe)?
# que tipo de medio contribuye mÃ¡s a las ventas?
# que precisamente podemos estimar el efecto de cada uno de los tipos de medios sobre las ventas?
# que precisamente podemos predecir las ventas futuras?
# ¿La relación es lineal?
# ¿Hay complementariedad entre los tipos de medio?
data <- read.csv("Advertising.csv") ## Cargar la data
str(data) # ver la estructura de la data
View(data)
# Analisis Univariado de la data
summary(data) # Tabla resumen
boxplot(data[,2:5]) # gráfico de cajas
cor(data$TV,data$radio) # por defecto utiliza pearson
cor(data$TV,data$radio, method = 'spearman') # correlacion de spearman , si es similiar significa que tiende a ser una distribucion normal
#Si no supera al 0.6, puede ir al modelo
# Analisis Bivariado de la data
correlacion<-cor(data[,2:5], method = 'spearman') # Calculando las matrices de correlaciones.
# Las correlaciones no deben superar 0.6, en las Xs
# Si superan al 0.6, se toma la que tenga mayor correlacion con el target
library(corrplot)
corrplot(correlacion, method="number", type="upper")
library("PerformanceAnalytics")
chart.Correlation(data[,2:5], histogram=TRUE, pch=19)
library(psych)
pairs.panels(data[,2:5], scale=TRUE)
library(corrplot)
corrplot.mixed(cor(data[,2:5]), order="hclust", tl.col="black")
library(GGally)
ggpairs(data[,2:5])
ggcorr(data[,2:5], nbreaks=8, palette='RdGy', label=TRUE, label_size=5, label_color='white')
library(ggcorrplot)
ggcorrplot(cor(data[,2:5]), p.mat = cor_pmat(mtcars), hc.order=TRUE, type='lower')
# Ajustamos un modelo lineal entre las ventas y el monto invertido en publicidad por TV
m <- lm(sales ~ TV, data = data)
# Vemos un resumen del modelo
summary(m)
# Predecir sobre nuevos registros
x_nuevos<-data.frame(TV=c(45,1000))
predict(m,x_nuevos)
# Guardar un Modelo Predictivo
saveRDS(m,"Modelo_Regresion.rds")
# Obtenemos los valores ajustados o predichos
# para cada x sacamos un y estimado
data$fitted <- m$fitted.values
# Podemos ver tambiÃ©n los residuales
data$residual <- m$residuals
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fitted), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fitted, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
##############################################
# ANÁLISIS DE REEGRESION MULTIPLE#############
##############################################
# Ajustamos un modelo lineal entre las ventas y el monto invertido en publicidad por TV
mm <- lm(sales ~ TV+radio, data = data)
# Vemos un resumen del modelo
summary(mm)
# Obtenemos los valores ajustados o predichos
data$fittedmm <- mm$fitted.values
# Podemos ver tambiÃ©n los residuales
data$residualmm <- mm$residuals
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fittedmm), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fittedmm, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
rm(list=ls())
data <- read.csv("Advertising.csv") ## Cargar la data
str(data) # ver la estructura de la data
View(data)
# Analisis Univariado de la data
summary(data) # Tabla resumen
boxplot(data[,2:5]) # gráfico de cajas
cor(data$TV,data$radio) # por defecto utiliza pearson
cor(data$TV,data$radio, method = 'spearman')
correlacion<-cor(data[,2:5], method = 'spearman')
library(corrplot)
corrplot(correlacion, method="number", type="upper")
library("PerformanceAnalytics")
chart.Correlation(data[,2:5], histogram=TRUE, pch=19)
library(psych)
pairs.panels(data[,2:5], scale=TRUE)
library(corrplot)
corrplot.mixed(cor(data[,2:5]), order="hclust", tl.col="black")
library(GGally)
ggpairs(data[,2:5])
ggcorr(data[,2:5], nbreaks=8, palette='RdGy', label=TRUE, label_size=5, label_color='white')
library(ggcorrplot)
ggcorrplot(cor(data[,2:5]), p.mat = cor_pmat(mtcars), hc.order=TRUE, type='lower')
m <- lm(sales ~ TV, data = data)
summary(m)
x_nuevos<-data.frame(TV=c(45,1000))
predict(m,x_nuevos)
saveRDS(m,"Modelo_Regresion.rds")
data$fitted <- m$fitted.values
# Podemos ver tambiÃ©n los residuales
data$residual <- m$residuals
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fitted), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fitted, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
mm <- lm(sales ~ TV+radio, data = data)
summary(mm)
data$fittedmm <- mm$fitted.values
data$residualmm <- mm$residuals
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fittedmm), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fittedmm, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
rm(list=ls())
data <- read.csv("Advertising.csv") ## Cargar la data
str(data) # ver la estructura de la data
View(data)
summary(data) # Tabla resumen
boxplot(data[,2:5]) # gráfico de cajas
cor(data$TV,data$radio) # por defecto utiliza pearson
cor(data$TV,data$radio, method = 'spearman') # correlacion de spearman , si es similiar significa que tiende a ser una distribucion normal
#Si no supera al 0.6, puede ir al modelo
# Analisis Bivariado de la data
correlacion<-cor(data[,2:5], method = 'spearman') # Calculando las matrices de correlaciones.
# Las correlaciones no deben superar 0.6, en las Xs
# Si superan al 0.6, se toma la que tenga mayor correlacion con el target
library(corrplot)
corrplot(correlacion, method="number", type="upper")
library("PerformanceAnalytics")
chart.Correlation(data[,2:5], histogram=TRUE, pch=19)
library(psych)
pairs.panels(data[,2:5], scale=TRUE)
library(corrplot)
corrplot.mixed(cor(data[,2:5]), order="hclust", tl.col="black")
library(GGally)
ggpairs(data[,2:5])
ggcorr(data[,2:5], nbreaks=8, palette='RdGy', label=TRUE, label_size=5, label_color='white')
library(ggcorrplot)
ggcorrplot(cor(data[,2:5]), p.mat = cor_pmat(mtcars), hc.order=TRUE, type='lower')
# Ajustamos un modelo lineal entre las ventas y el monto invertido en publicidad por TV
m <- lm(sales ~ newspaper, data = data)
# Vemos un resumen del modelo
summary(m)
# Predecir sobre nuevos registros
x_nuevos<-data.frame(newspaper=c(45,50))
predict(m,x_nuevos)
# Guardar un Modelo Predictivo
saveRDS(m,"Modelo_Regresion_newspaper.rds")
# Obtenemos los valores ajustados o predichos
# para cada x sacamos un y estimado
data$fitted <- m$fitted.values
# Podemos ver tambiÃ©n los residuales
data$residual <- m$residuals
ggplot(data = data, aes(x = newspaper, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fitted), color = "blue") +
geom_segment(aes(x = newspaper, xend = newspaper, y = sales, yend = fitted, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para newspaper", ylab = "Ventas") +
theme_bw()
mm <- lm(sales ~ TV+newspaper, data = data)
summary(mm)
data$fittedmm <- mm$fitted.values
data$residualmm <- mm$residuals
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fittedmm), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fittedmm, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
