rm(list=ls())
##########################################################################
##### -- Programa de Especialización en Data Science - Nivel I -- ########
##########################################################################
######## Tema : Modelos de Regresion Avanzados ###########################
######## Autores: Jose Cardenas - Andre Chavez  ##########################
##########################################################################
############################################
# ANÁLISIS DE REGRESION SIMPLE Y MULTIPLE #
############################################
############################################
# ANÁLISIS DE REGRESION SIMPLE#############
############################################
rm(list=ls())
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
install.packages(c("readr", "ggplot2", "tidyr", "dplyr", "ISLR", "foreign"))
data <- read.csv("Advertising.csv") ## Cargar la data
str(data) # ver la estructura de la data
View(data)
# Analisis Univariado de la data
summary(data) # Tabla resumen
boxplot(data[,2:5]) # gráfico de cajas
cor(data$TV,data$radio) # por defecto utiliza pearson
cor(data$TV,data$radio, method = 'spearman') # correlacion de spearman , si es similiar significa que tiende a ser una distribucion normal
#Si no supera al 0.6, puede ir al modelo
# Analisis Bivariado de la data
correlacion<-cor(data[,2:5], method = 'spearman')
data <- read.csv("Advertising.csv")
setwd("C:/Users/alumno/Desktop/datascience-urp-esp/clase1")
data <- read.csv("Advertising.csv")
str(data) # ver la estructura de la data
View(data)
summary(data) # Tabla resumen
boxplot(data[,2:5]) # gráfico de cajas
cor(data$TV,data$radio) # por defecto utiliza pearson
cor(data$TV,data$radio, method = 'spearman') #
correlacion<-cor(data[,2:5], method = 'spearman') # Calculando las matrices de correlaciones.
# Si superan al 0.6, se toma la que tenga mayor correlacion con el target
library(corrplot)
corrplot(correlacion, method="number", type="upper")
library("PerformanceAnalytics")
chart.Correlation(data[,2:5], histogram=TRUE, pch=19)
library(psych)
pairs.panels(data[,2:5], scale=TRUE)
library(corrplot)
corrplot.mixed(cor(data[,2:5]), order="hclust", tl.col="black")
library(GGally)
ggpairs(data[,2:5])
ggcorr(data[,2:5], nbreaks=8, palette='RdGy', label=TRUE, label_size=5, label_color='white')
library(ggcorrplot)
ggcorrplot(cor(data[,2:5]), p.mat = cor_pmat(mtcars), hc.order=TRUE, type='lower')
# Ajustamos un modelo lineal entre las ventas y el monto invertido en publicidad por TV
m <- lm(sales ~ TV, data = data)
# Vemos un resumen del modelo
summary(m)
x_nuevos<-data.frame(TV=c(45,1000))
predict(m,x_nuevos)
saveRDS(m,"Modelo_Regresion.rds")
# Obtenemos los valores ajustados o predichos
# para cada x sacamos un y estimado
data$fitted <- m$fitted.values
# Podemos ver tambiÃ©n los residuales
data$residual <- m$residuals
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fitted), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fitted, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
install.packages("ggplot2")
ggplot(data = data, aes(x = TV, y = sales)) + geom_point(color = "red") +
geom_line(aes(y = fitted), color = "blue") +
geom_segment(aes(x = TV, xend = TV, y = sales, yend = fitted, color="Distancia"), color = "grey80") +
labs(xlab = "Presupuesto para TV", ylab = "Ventas") +
theme_bw()
carros <- read.csv("carros2011imputado2.csv")
matrizcorrelacion <- cor(carros[, 2:17], method = 'spearman')
write.csv(matrizcorrelacion, "matriz_carros_correlacion.csv")
set.seed(1234)
sample <- sample.int(nrow(carros), round(.8*nrow(carros)))
carros.train<- carros[sample, ]
carros.validation <- carros[-sample, ]
# x train
precio.train=as.matrix(carros.train$precio_promedio)
# x test
predictores.train=as.matrix(carros.train[,2:17])
# y train
precio.validation=as.matrix(carros.validation$precio_promedio)
# y test
predictores.validation=as.matrix(carros.validation[,2:17])
install.packages("glmnet")
library(glmnet)
fitridge=glmnet(predictores.train,precio.train,alpha=0)
View(fitridge)
View(fitridge)
library(glmnet)
fitridge=glmnet(predictores.train,precio.train,alpha=0)
fitridge$beta
plot(fitridge)
foundrigde=cv.glmnet(predictores.train,precio.train,alpha=0,nfolds=5)
plot(foundrigde)
attributes(foundrigde)
foundrigde$lambda
foundrigde$lambda.1se
foundrigde$lambda.min
coef(fitridge,s=foundrigde$lambda.1se)
coef(fitridge,s=foundrigde$lambda.min)
prediridge=predict(foundrigde,predictores.validation,s="lambda.min")
View(prediridge)
ridgemse=sqrt(mean((prediridge-precio.validation)^2))
ridgemse
prediridge1=predict(foundrigde,predictores.validation,s="lambda.1se")
ridgemse1=sqrt(mean((prediridge1-precio.validation)^2))
ridgemse1
fitlasso=glmnet(predictores.train,precio.train,alpha=1)
founlasso=cv.glmnet(predictores.train,precio.train,alpha=1,nfolds=5)
plot(founlasso)
founlasso$lambda.1se #
founlasso$lambda.min
coef(fitlasso,s=founlasso$lambda.1se)
coef(fitlasso,s=founlasso$lambda.min)
predilasso=predict(founlasso,predictores.validation,s="lambda.min")
lassomse=sqrt(mean((predilasso-precio.validation)^2))
lassomse
predilasso1=predict(founlasso,predictores.validation,s="lambda.1se")
lassomse1=sqrt(mean((predilass1o-precio.validation)^2))
lassomse1
predilasso1=predict(founlasso,predictores.validation,s="lambda.1se")
lassomse1=sqrt(mean((predilasso1-precio.validation)^2))
lassomse1
fitnet=glmnet(predictores.train,precio.train,alpha=0.5)
founnet=cv.glmnet(predictores.train,precio.train,alpha=0.5,nfolds=5)
plot(founnet)
founnet$lambda.1se # muestra el lambda optimo sugerencia
founnet$lambda.min
coef(fitnet,s=founnet$lambda.1se)
coef(fitnet,s=founnet$lambda.min)
predinet=predict(founnet,predictores.validation,s="lambda.min")
netmse=sqrt(mean((predinet-precio.validation)^2))
netmse
predine1t=predict(founnet,predictores.validation,s="lambda.min")
netmse1=sqrt(mean((predinet1-precio.validation)^2))
netmse1
predinet1=predict(founnet,predictores.validation,s="lambda.min")
netmse1=sqrt(mean((predinet1-precio.validation)^2))
netmse1
View(foundrigde)
View(foundrigde)
#comparacion
cbind(ridgemse,lassomse,netmse)
cbind(ridgemse,lassomse,netmse,ridgemse1,lassomse1,netmse1)
rm(list=ls())
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
install.packages(c("tidyr", "dplyr", "foreign"))
library(readr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ISLR)
library(foreign)
data <- read.csv("grasacorporal.csv")
str(data) # ver la estructura de la data
View(data)
# Analisis Univariado de la data
summary(data) #
correlacion<-cor(data[,], method = 'spearman') # Calculando las matrices de correlaciones.
View(correlacion)
grasacorporal <- data$grasacorp
data[2]<-NULL
View(data)
View(data)
data$grasacor p<- grasacorporal
data$grasacorp <- grasacorporal
View(data)
View(data)
library(corrplot)
corrplot(correlacion, method="number", type="upper")
install.packages("corrplot")
library(corrplot)
corrplot(correlacion, method="number", type="upper")
mm <- lm(sales ~ ., data = data)
mm <- lm(grasacorp ~ ., data = data)
summary(mm)
mm1 <- lm(grasacorp ~ densidad + edad+peso+ pecho+ abdomen++tobillo+biceps+antebrazo, data = data)
summary(mm1)
summary(mm)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps+antebrazo+cadera, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps+antebrazo+muslo, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps+antebrazo+rodilla, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps+antebrazo+cuello, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps+antebrazo+muneca, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps+antebrazo+estatura, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps+antebrazo, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+tobillo
+biceps, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad+edad+pecho+abdomen+tobillo+biceps, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad+edad+peso+pecho+abdomen+biceps, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad+edad+pecho+abdomen+tobillo+biceps, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad+edad+pecho+abdomen+tobillo+biceps, data = data)
summary(mm1)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad+edad+peso+pecho+abdomen+tobillo+biceps, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps+antebrazo, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad
+edad+peso+pecho+abdomen+tobillo
+biceps, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad, data = data)
summary(mm1)
mm1 <- lm(grasacorp ~ densidad, data = data)
summary(mm1)
data$fittedmm <- mm1$fitted.values
data$residualmm <- mm1$residuals
ggplot(data = data, aes(x = densidad, y = grasacorp)) + geom_point(color = "red") +
geom_line(aes(y = fittedmm), color = "blue") +
geom_segment(aes(x = densidad, xend = densidad, y = grasacorp, yend = fittedmm, color="Distancia"), color = "grey80") +
labs(xlab = "Densidad", ylab = "Grasa corporal") +
theme_bw()
## Particion Muestral (train 80% y test 20%)
set.seed(1234)
sample <- sample.int(nrow(data), round(.7*nrow(data)))
data.train<- data[sample, ]
data.validation <- data[-sample, ]
grasacorp.train=as.matrix(data.train$grasacorp)
carros <- read.csv("carros2011imputado2.csv")
View(carros)
View(carros)
View(data.train)
View(data.train)
grasacorp.train=as.matrix(data.train$grasacorp)
View(grasacorp.train)
View(grasacorp.train)
predictores.train=as.matrix(data.train[,1:14])
View(predictores.train)
View(predictores.train)
grasacorp.validation=as.matrix(data.validation$grasacorp)
predictores.validation=as.matrix(data.validation[,1:14])
library(glmnet)
fitridge=glmnet(predictores.train,grasacorp.train,alpha=0)
fitridge$beta
plot(fitridge)
foundrigde=cv.glmnet(predictores.train,grasacorp.train,alpha=0,nfolds=5)
plot(foundrigde)
attributes(foundrigde)
foundrigde$lambda
foundrigde$lambda.1se
foundrigde$lambda.min
coef(fitridge,s=foundrigde$lambda.1se)
coef(fitridge,s=foundrigde$lambda.min)
prediridge=predict(foundrigde,predictores.validation,s="lambda.min")
ridgemse=sqrt(mean((prediridge-precio.validation)^2))
ridgemse
prediridge=predict(foundrigde,predictores.validation,s="lambda.min")
prediridge=predict(foundrigde,predictores.validation,s="lambda.min")
ridgemse=sqrt(mean((prediridge-grasacorp.validation)^2))
ridgemse
prediridge1=predict(foundrigde,predictores.validation,s="lambda.1se")
ridgemse1=sqrt(mean((prediridge1-grasacorp.validation)^2))
ridgemse1
fitlasso=glmnet(predictores.train,grasacorp.train,alpha=1)
founlasso=cv.glmnet(predictores.train,grasacorp.train,alpha=1,nfolds=5)
plot(founlasso)
founlasso$lambda.1se
founlasso$lambda.min
coef(fitlasso,s=founlasso$lambda.1se)
coef(fitlasso,s=founlasso$lambda.min)
predilasso=predict(founlasso,predictores.validation,s="lambda.min")
lassomse=sqrt(mean((predilasso-grasacorp.validation)^2))
lassomse
predilasso1=predict(founlasso,predictores.validation,s="lambda.1se")
lassomse1=sqrt(mean((predilasso1-grasacorp.validation)^2))
lassomse1
fitnet=glmnet(predictores.train, grasacorp.train,alpha=0.5)
founnet=cv.glmnet(predictores.train,grasacorp.train,alpha=0.5,nfolds=5)
plot(founnet)
founnet$lambda.1se # muestra el lambda optimo sugerencia
founnet$lambda.min # muestra el lambda de negocio
coef(fitnet,s=founnet$lambda.1se)
coef(fitnet,s=founnet$lambda.min)
predinet=predict(founnet,predictores.validation,s="lambda.min")
netmse=sqrt(mean((predinet-grasacorp.validation)^2))
netmse
predinet1=predict(founnet,predictores.validation,s="lambda.min")
netmse1=sqrt(mean((predinet1-grasacorp.validation)^2))
netmse1
#comparacion
cbind(ridgemse,lassomse,netmse,ridgemse1,lassomse1,netmse1)
lmpredict <- predict(mm1, predictores.validation)
lmpredict
mm1 <- lm(grasacorp ~ densidad, data = data.train)
summary(mm1)
lmpredict <- predict(mm1, predictores.validation)
x_nuevos<-data.frame(grasacorp=predictores.validation)
lmpredict <- predict(mm1,x_nuevos)
x_nuevos<-data.frame(predictores.validation)
lmpredict <- predict(mm1,x_nuevos)
lmpredict
#comparacion
cbind(ridgemse,lassomse,netmse,ridgemse1,lassomse1,netmse1, lmpredict)
lmse=sqrt(mean((mm1-grasacorp.validation$grasacorp)^2))
lmse
lmse=sqrt(mean((lmpredict-grasacorp.validation$grasacorp)^2))
predictlm <- predict(mm1,grasacorp.validation$grasacorp)
predictlm <- predict(mm1,grasacorp.validation$grasacorp)
lmse=sqrt(mean((predictlm-grasacorp.validation$grasacorp)^2))
lmse
predictlm <- predict(mm1,grasacorp.validation$grasacorp)
predictlm <- predict(mm1,grasacorp.validation$grasacorp)
