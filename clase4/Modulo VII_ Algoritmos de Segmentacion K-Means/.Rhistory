library(ggplot2)  # Graficas y visualizacion
library(TSA)      # Formato y trabajar con series de tiempo
library(forecast) # Estimaciones y pronosticos de series de tiempo
library(scales)   # Preprocesamiento de los datos
library(stats)
setwd("C:/Users/Admin/Desktop/datascience-urp-esp/clase4/Modulo VI _ Series de Tiempo")
pbi=read.csv("pbi.csv",header = T,sep="",dec=",")
View(pbi)
pbits<-ts(pbi,start=c(1991,1),end=c(2009,12),frequency=12)
fechas = seq(as.Date("1991/1/1"), length.out = length(pbits), by = "months")
pbits
plot(pbits,
main="PBI (Enero 1991 - Diciembre 2009)",
ylab="PBI",
xlab="AÃ±os")
boxplot(split(pbits, cycle(pbits)), names = month.abb, col = "gold")
Yt_desc = decompose(pbits,type = "multiplicative",filter = NULL)
Yt_desc$x
Yt_desc$seasonal
Yt_desc$trend
Yt_desc$random
Yt_desc$seasonal
plot(Yt_desc , xlab='AÃ±o')
# Serie original
pbits_original<-Yt_desc$x
View(pbits_original)
Coeficientes_Estacionales<-Yt_desc$seasonal
plot(Coeficientes_Estacionales)
Yt_desc$trend
Tendencia_pbi<-pbits_original/Coeficientes_Estacionales
plot(Tendencia_pbi)
Tendencia_pbi<-as.double(Tendencia_pbi)
T = length(Tendencia_pbi)
yi = Tendencia_pbi[1:T]
# Ajustar 4 modelos: lineal, cuadratico, cubico
t = seq(1:T) # Creo un termino lineal
t2 = t**2 # Creo un termino cuadrático
t3 = t**3 # Creo un termino cúbico
mod.lin = lm(yi~t)
mod.cuad = lm(yi~t+t2)
mod.cub = lm(yi~t+t2+t3)
summary(mod.lin)
summary(mod.cuad)
summary(mod.cub)
ajust_lineal  <- mod.lin$fitted.values # Estimacion de la tendencia
ajust_cuadrado<- mod.cuad$fitted.values
ajust_cubico  <- mod.cub$fitted.values
estimacion_lineal    <- ajust_lineal*Coeficientes_Estacionales
estimacion_cuadratico<- ajust_cuadrado*Coeficientes_Estacionales
estimacion_cubico    <- ajust_cubico*Coeficientes_Estacionales
forecast(estimacion_lineal, h = 2)
forecast(estimacion_lineal, h = 12)
forecast(estimacion_lineal, h = 100)
plot(forecast(estimacion_lineal,h=12),col=3)
lines(pbits,col=1)
plot(forecast(estimacion_cuadratico,h=12),col=3)
lines(pbits,col=1)
# plot(forecast(estimacion_cubico,h=12),col=3)
plot(forecast(estimacion_cubico,h=12),col=3)
lines(pbits,col=1)
plot(forecast(estimacion_cubico,h=12),col=3)
lines(pbits,col=1)
lines(estimacion_lineal, col=1)
lines(estimacion_cuadratico, col=7)
legend("topleft", lty=1, col=c(2,3,1,7),
legend=c("Est.Cubica","Datos Ori.",
"Est.Lineal","Est.Cuadratica"),
bty="n")
accuracy(estimacion_lineal,pbits)
library(ggplot2)
#install.packages("TSA")
library(TSA)
#install.packages("forecast")
library(forecast)
library(scales)
library(stats)
# Carga de datos
Yt<-read.delim("datatesisaereo.txt",header=T)
View(Yt)
View(Yt)
date<-seq(as.Date("2000/01/01"),as.Date("2012/12/01"),by="months")
library(arima)
install.packages("arima")
date<-seq(as.Date("2000/01/01"),as.Date("2012/12/01"),by="months")
plot(Yt,
main="Emigracion internacional de peruanos",
xlab="Años",
ylab="Emigracion internacional de peruanos",
col="lightblue"
)
plot(Yt,
main="Emigracion internacional de peruanos",
xlab="Años",
ylab="Emigracion internacional de peruanos",
col=2
)
plot(date,
main="Emigracion internacional de peruanos",
xlab="Años",
ylab="Emigracion internacional de peruanos",
col=2
)
data<-data.frame(Yt,date)
fit<-auto.arima(Yt)
fit
Yt<-read.delim("datatesisaereo.txt",header=T)
Yt<-ts(Yt,start=c(2000,1),freq=12)
date<-seq(as.Date("2000/01/01"),as.Date("2012/12/01"),by="months")
data<-data.frame(Yt,date)
fit<-auto.arima(Yt)
fit
plot(Yt,col="lightblue",
main="Grafico de la serie ...",
ylab="Viajeros (en miles)",
xlab="Tiempo")
plot(Yt,col=1,
main="Grafico de la serie ...",
ylab="Viajeros (en miles)",
xlab="Tiempo")
plot(Yt,
main="Emigracion internacional de peruanos",
xlab="Años",
ylab="Emigracion internacional de peruanos",
col=2
)
# Plot
plot(Yt,col=1,
main="Grafico de la serie ...",
ylab="Viajeros (en miles)",
xlab="Tiempo")
lambda<-BoxCox.lambda(Yt,lower=-5,upper=5)
Yt_t<-BoxCox(Yt,lambda=lambda)
# Plot
plot(Yt_t,col="lightblue",
main="Grafico de la serie .......",
ylab="Migracion(ejemplo) (en miles)",
xlab="Tiempo")
Yt_t_1r<-diff(Yt_t,1,1)
plot(Yt_t_1r,
main="Grafico de la serie ...... diferenciada una vez regularmente",
ylab="Migraciones (en miles)",
xlab="Tiempo")
acf(Yt_t_1r,lag.max=39,
xaxp=c(0,16,16),
main="ACF de la serie ......",
ylab="Autocorrelaciones",
xlab="Retardo")
fit<-Arima(Yt,order=c(0,1,1),seasonal=list(order=c(0,1,1),period=12))
fit
plot(fit$residuals,
main="",
ylab="",
xlab="Tiempo")
qqnorm(fit$residuals)
qqline(fit$residuals)
ks.test(fit$residuals,"pnorm")
setwd("C:/Users/Admin/Desktop/datascience-urp-esp/clase4/Modulo VII_ Algoritmos de Segmentacion K-Means")
library("cluster") # Se encuentran algoritmos no supervisados
library("fpc")     # Se encuentran algoritmos no supervisados
library("mclust")  # Se encuentran algoritmos no supervisados
library("dbscan")  # Se encuentran algoritmos no supervisados
library("readxl")
install.packages(c("cluster", "fpc", "mclust", "dbscan", "readxl"))
library("cluster") # Se encuentran algoritmos no supervisados
library("fpc")     # Se encuentran algoritmos no supervisados
library("mclust")  # Se encuentran algoritmos no supervisados
library("dbscan")  # Se encuentran algoritmos no supervisados
library("readxl")
carros<-read.csv("BaseAutos.csv", header=TRUE, sep=",", dec=".")
library("cluster") # Se encuentran algoritmos no supervisados
library("fpc")     # Se encuentran algoritmos no supervisados
library("mclust")  # Se encuentran algoritmos no supervisados
library("dbscan")  # Se encuentran algoritmos no supervisados
library("readxl")
View(carros)
summary(carros) #
str(carros)
carros$ID <- as.factor(carros$ID)
numericos <- sapply(carros, is.numeric)
carrosnum <- carros[ ,numericos]
carroslabel<-paste(carros$fabricante,carros$modelo)
head(carrosnum)
carrosnormal<-scale(carrosnum)
carrosnormal<-scale(carrosnum) # Estamos estadarizando las variables
head(carrosnormal)
ejemploeuclid<-dist(carrosnormal[2:3,],method="euclidean")
ejemploeuclid
carrosdist<-dist(carrosnormal,method="euclidean")
carrosjerarq <- hclust(carrosdist,method="ward.D")
plot(carrosjerarq, labels=carroslabel)
set.seed(100)
carroskmcluster<-kmeans(carrosnormal,centers=4,iter.max=1000000)
carroskmcluster$iter  #
carroskmcluster$cluster
carroskmcluster$centers
# Aplicamos el algoritmo de k-means
carroskmcluster<-kmeans(carrosnormal,centers=8,iter.max=1000000)
carroskmcluster$iter
carroskmcluster$cluster
carroskmcluster$centers
carroskmcluster$size
par(mfrow=c(1,1))
clusplot(carros,carroskmcluster$cluster, color=TRUE)
# Calcula la suma total de cuadrados
wss <- (nrow(carrosnormal)-1)*sum(apply(carrosnormal,2,var))
# La calcula por clusters
for (i in 2:15) wss[i] <- sum(kmeans(carrosnormal,
centers=i)$withinss)
# Codo de Yambu
plot(1:15, wss, type="b", xlab="Nummero de Clusters",
ylab="Suma de cuadrados within")
# Aplicamos el algoritmo de k-means
carroskmcluster<-kmeans(carrosnormal,centers=4,iter.max=1000000)
# Parametros: data,k,iter
carroskmcluster$iter  #
carroskmcluster$cluster
# Centroides o centros de gravedad
carroskmcluster$centers
# TamaÃ±o de los clusters
carroskmcluster$size
par(mfrow=c(1,1))
clusplot(carros,carroskmcluster$cluster, color=TRUE)
wss <- (nrow(carrosnormal)-1)*sum(apply(carrosnormal,2,var))
# La calcula por clusters
for (i in 2:15) wss[i] <- sum(kmeans(carrosnormal,
centers=i)$withinss)
# Codo de Yambu
plot(1:15, wss, type="b", xlab="Nummero de Clusters",
ylab="Suma de cuadrados within")
set.seed(100)
carrosmedoid<-pam(carrosnormal,k=4,stand=FALSE)
clusplot(carrosmedoid)
par(mfrow=c(1,1))
clusplot(carros,carroskmcluster$cluster, color=TRUE)
carroskmcluster<-kmeans(carrosnormal,centers=4,iter.max=1000000)
carroskmcluster$iter  # Ver numero de iteraciones
# Cluster de pertenencia
carroskmcluster$cluster
par(mfrow=c(1,1))
clusplot(carros,carroskmcluster$cluster, color=TRUE)
carrosmedoid<-pam(carrosnormal,k=4,stand=FALSE)
clusplot(carrosmedoid)
carrosmedoid$medoids
carrosmedoid$id.med # TamaÃ±o
carrosmedoid$clusinfo
summary(carrosmedoid)
#los valores para guardarlos
carrosmedoid$clustering
# Calcula la suma total de cuadrados
wss <- (nrow(carrosnormal)-1)*sum(apply(carrosnormal,2,var))
# La calcula por clusters
for (i in 2:15) wss[i] <- sum(kmeans(carrosnormal,
centers=i)$withinss)
# Codo de Yambu
plot(1:15, wss, type="b", xlab="Nummero de Clusters",
ylab="Suma de cuadrados within")
#es un indice basado/cercano a una F de anova
set.seed(123)
clustering.ch <- kmeansruns(carrosnormal,krange=2:100,
criterion="asw", # Silueta
iter.max=1000,
runs= 100,
critout=TRUE)
clustering.ch <- kmeansruns(carrosnormal,krange=2:100,
criterion="asw", # Silueta
iter.max=1000,
runs= 100,
critout=TRUE)
set.seed(123)
clustering.ch <- kmeansruns(carrosnormal,krange=2:10,
criterion="asw", # Silueta
iter.max=1000,
runs= 100,
critout=TRUE)
clustering.ch$bestk
set.seed(2)
clustering.asw <- kmeansruns(carrosnormal,krange=2:10,criterion="asw",
iter.max=100, runs= 100,critout=TRUE)
clustering.asw$bestk
clustering.asw$crit
gscar<-clusGap(carrosnormal,FUN=kmeans,K.max=8,B=60)
gscar
kclusters <- clusterboot(carrosnormal,B=1000,
clustermethod=kmeansCBI,
k=3,seed=5)
kclusters$bootmean
hgroups <- kclusters$result$partition
hgroups
